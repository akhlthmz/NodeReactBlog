{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport setAuthToken from '../../utils/setAuthToken';\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\"; //Load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\" http://localhost:5000/users/getuser\");\n    console.log(res);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //registration\n\nexport const registerUser = payload => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify(payload);\n\n  try {\n    const res = await axios.post(\"http://localhost:5000/register/user\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n    dispatch(setAlert(\"User registered successfully!\", \"success\"));\n  } catch (err) {\n    const error = err.response.data;\n\n    if (error) {\n      dispatch(setAlert(error.msg, \"error\"));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login user\n\nexport const loginUser = payload => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify(payload);\n\n  try {\n    const res = await axios.post(\"http://localhost:5000/users/login\", body, config);\n    console.log(res.data);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const error = err.response.data;\n\n    if (error) {\n      dispatch(setAlert(error.msg, \"error\"));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/akhilthomas/Desktop/blog/client/src/store/actions/auth.js"],"names":["axios","setAlert","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","localStorage","token","res","get","console","log","type","payload","data","err","registerUser","config","headers","body","JSON","stringify","post","error","response","msg","loginUser"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport setAuthToken from '../../utils/setAuthToken'\n\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\n\n//Load user\nexport const loadUser = () => async (dispatch) => {\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n    try {\n      const res = await axios.get(\" http://localhost:5000/users/getuser\");\n      console.log(res)\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n      });\n    }\n  };\n\n\n\n//registration\nexport const registerUser = (payload) => async (\n    dispatch\n  ) => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    const body = JSON.stringify(payload);\n  \n    try {\n      const res = await axios.post(\n        \"http://localhost:5000/register/user\",\n        body,\n        config\n      );\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n      dispatch(loadUser());\n      dispatch(setAlert(\"User registered successfully!\", \"success\"));\n    } catch (err) {\n      const error = err.response.data\n  \n      if (error) {\n        dispatch(setAlert(error.msg, \"error\"));\n      }\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    }\n  };\n\n  //Login user\n  export const loginUser = (payload) => async (dispatch) => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    const body = JSON.stringify(payload);\n  \n    try {\n      const res = await axios.post(\n        \"http://localhost:5000/users/login\",\n        body,\n        config\n      );\n      console.log(res.data);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n      dispatch(loadUser());\n    } catch (err) {\n        const error = err.response.data\n  \n        if (error) {\n          dispatch(setAlert(error.msg, \"error\"));\n        }\n      \n      dispatch({\n        type: LOGIN_FAIL,\n      });\n    }\n  };\n  "]},"metadata":{},"sourceType":"module"}